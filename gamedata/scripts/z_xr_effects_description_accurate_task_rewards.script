local ini
local loadouts
local debug = false

function print_debug(...)
    if debug then
        printf(...)
    end
end

function filter_weapons_to(tbl)
    return function (temp, item)
        local id = item:id()
        if IsWeapon(item) then
            tbl[id] = item
        end
    end
end

function notify_weapon_felt_apart()
    local red_color = utils_xml.get_color("d_red")
    local white_color = utils_xml.get_color("pda_white")
    news_manager.send_tip(db.actor, string.format(game.translate_string("description_accurate_task_rewards_weapon_fail"), red_color, white_color))
end

function notify_no_ammo_left()
    news_manager.send_tip(db.actor, game.translate_string("description_accurate_task_rewards_ammo_fail"))
end

function get_task_giver_npc(p)
    if not (p and p[1]) then
        return nil
    end

    local tm = task_manager.get_task_manager()
    local tsk = tm.task_info[p[1]]
    local giver_id = tsk.task_giver_id
    return giver_id and db.storage[giver_id] and db.storage[giver_id].object
end

function xr_effects.reward_faction_gun(actor, actor_npc, p)
    -- param1 - task_id
    local npc = get_task_giver_npc(p)

    if not npc then
        notify_weapon_felt_apart()
        return
    end

    local id = npc:id()
    local sim = alife()
    local se_npc = sim:object(id)

    local weapons_before = {}

    npc:iterate_inventory(filter_weapons_to(weapons_before), npc)

    local squad = se_npc.group_id and se_npc.group_id ~= 65535 and alife_object(se_npc.group_id)
    local player_id = squad and squad.player_id
    local squad_name = squad and squad:section_name() or "na"
    local comm = se_npc:community()
    local rank = ranks.get_obj_rank_name(se_npc)
    local data = utils_stpk.get_stalker_data(se_npc)
    local visual = data.visual_name or "na"

    xrs_rnd_npc_loadout.create_item_on_npc(se_npc, squad_name, comm, rank, visual, player_id, "primary")

    local function createInterval(callback)
        CreateTimeEvent("xr_effects_actual_comrade_rifle", "delay_func", 1, function()
            local success = callback()
            if not success then
                createInterval(callback)
            end
            return true
        end)
    end

    createInterval(function()
        local weapons_after = {}
        npc:iterate_inventory(filter_weapons_to(weapons_after), npc)

        local found = false
        for item_id, item in pairs(weapons_after) do
            if not weapons_before[item_id] then
                npc:mark_item_dropped(item, true) --don't spawn ammo for it, see death_manager.script:734
                death_manager.set_weapon_drop_condition(npc, item)
                item:set_ammo_elapsed(0)
                npc:transfer_item(item, db.actor)
                news_manager.relocate_item(db.actor, "in", item:section(), 1)
                found = true
            end
        end

        return found
    end)
end

function set_xrs_rnd_npc_loadout_vars()
    if not ini or not loadouts then
        ini = xrs_rnd_npc_loadout.ini
        loadouts = xrs_rnd_npc_loadout.loadouts
    end
end

function npc_relative_loadout_pick(comm, rank, slot_type)
    set_xrs_rnd_npc_loadout_vars()
    -- Get loadout section
    local loadout = (comm .. "_" .. rank)
    if (not ini:section_exist(loadout)) then
        loadout = comm
        if (not ini:section_exist(loadout)) then
            loadout = "default"
        end
    end

    -- Get slot section
    local slot = ini:r_string_ex(loadout,slot_type)
    if not (slot and ini:section_exist(slot) and loadouts[slot]) then
        return nil
    end

    -- Pick an item
    local pick
    if (#loadouts[slot] > 1) then
        pick = math.random(#loadouts[slot])
    elseif (#loadouts[slot] == 1) then
        pick = 1
    end

    return loadouts[slot][pick]
end

function spawn_ammo_on_actor(ammo_class)
    -- randomly spawn only 1 ammo type per found weapon, see death_manager.script:741
    if (#ammo_class > 0) then
        local ammo_section = ammo_class[math.random(1,#ammo_class)]
        -- DPH_LOOT_COND
        if ui_mcm.get('dph_loot_cond/ammo/disable_bad') and ammo_section:find('%_bad$') then
            ammo_section = ammo_section:sub(1, -5)
        end
        -- DPH_LOOT_COND

        local num_in_box = ini_sys:r_u32(ammo_section, "box_size")
        alife_create_item(ammo_section, db.actor, {ammo = num_in_box})
        news_manager.relocate_item(db.actor, "in", ammo_section, num_in_box)
    else
        notify_no_ammo_left()
    end
end

function xr_effects.reward_own_ammo(actor, actor_npc, p)
    -- param1 - task_id
    local npc = get_task_giver_npc(p)

    if not npc then
        notify_no_ammo_left()
        return
    end

    local bw = npc:active_item() and npc:best_weapon()
    if not bw then
        notify_no_ammo_left()
        return
    end

    local ammo_class = parse_list(ini_sys,bw:section(),"ammo_class")

    spawn_ammo_on_actor(ammo_class)
end

function xr_effects.reward_random_ammo(actor, actor_npc, p)
    -- param1 - task_id
    local npc = get_task_giver_npc(p)

    printf("npc %s", npc and npc:id() or "nil")
    if not npc then
        notify_no_ammo_left()
        return
    end

    local id = npc:id()
    local sim = alife()
    local se_npc = sim:object(id)
    local comm = se_npc:community()
    local rank = ranks.get_obj_rank_name(se_npc)

    local random_weapon = npc_relative_loadout_pick(comm, rank, "primary")
    if not random_weapon then
        notify_no_ammo_left()
        return
    end

    local ammo_class = parse_list(ini_sys,random_weapon.sec,"ammo_class")

    spawn_ammo_on_actor(ammo_class)
end

local tasks_map = {
    ["simulation_task_31"] = function() xr_effects.reward_faction_gun(nil, nil, { "simulation_task_31" }) end,
    ["simulation_task_13"] = function() xr_effects.reward_faction_gun(nil, nil, { "simulation_task_13" }) end,
    ["simulation_task_73"] = function() xr_effects.reward_faction_gun(nil, nil, { "simulation_task_73" }) end,
    ["simulation_task_4"] = function() xr_effects.reward_own_ammo(nil, nil, { "simulation_task_4" }) end,
    ["simulation_task_14"] = function() xr_effects.reward_random_ammo(nil, nil, { "simulation_task_14" }) end,
}

function on_game_start()
    local old_task_manager_set_task_completed = task_manager.CRandomTask.set_task_completed
    function task_manager.CRandomTask.set_task_completed(self, task_id)

        printf("new task_manager.set_task_completed %s", task_id)
        local task_reward = tasks_map[task_id]
        if task_reward then
            task_reward()
        end

        old_task_manager_set_task_completed(self, task_id)
    end
end